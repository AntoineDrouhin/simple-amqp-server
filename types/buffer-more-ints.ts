declare module "buffer-more-ints" {
  function isContiguousInt(value: number): true;
  function assertContiguousInt(value: number): void;
  function readUInt8(buffer: Buffer, value: number, offset: number): void;
  function writeUInt8(buffer: Buffer, value: number, offset: number): void;
  function readUInt16LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt16LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt16BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt16BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt32LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt32LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt32BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt32BE(buffer: Buffer, value: number, offset: number): void;
  function readInt8(buffer: Buffer, value: number, offset: number): void;
  function writeInt8(buffer: Buffer, value: number, offset: number): void;
  function readInt16LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt16LE(buffer: Buffer, value: number, offset: number): void;
  function readInt16BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt16BE(buffer: Buffer, value: number, offset: number): void;
  function readInt32LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt32LE(buffer: Buffer, value: number, offset: number): void;
  function readInt32BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt32BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt24BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt24BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt40BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt40BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt48BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt48BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt56BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt56BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt64BE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt64BE(buffer: Buffer, value: number, offset: number): void;
  function readUInt24LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt24LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt40LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt40LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt48LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt48LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt56LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt56LE(buffer: Buffer, value: number, offset: number): void;
  function readUInt64LE(buffer: Buffer, value: number, offset: number): void;
  function writeUInt64LE(buffer: Buffer, value: number, offset: number): void;
  function readInt24BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt24BE(buffer: Buffer, value: number, offset: number): void;
  function readInt40BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt40BE(buffer: Buffer, value: number, offset: number): void;
  function readInt48BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt48BE(buffer: Buffer, value: number, offset: number): void;
  function readInt56BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt56BE(buffer: Buffer, value: number, offset: number): void;
  function readInt64BE(buffer: Buffer, value: number, offset: number): void;
  function writeInt64BE(buffer: Buffer, value: number, offset: number): void;
  function readInt24LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt24LE(buffer: Buffer, value: number, offset: number): void;
  function readInt40LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt40LE(buffer: Buffer, value: number, offset: number): void;
  function readInt48LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt48LE(buffer: Buffer, value: number, offset: number): void;
  function readInt56LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt56LE(buffer: Buffer, value: number, offset: number): void;
  function readInt64LE(buffer: Buffer, value: number, offset: number): void;
  function writeInt64LE(buffer: Buffer, value: number, offset: number): void;
}
